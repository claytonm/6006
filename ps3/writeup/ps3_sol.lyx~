#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble
%
% 6.006 problem set 2
%


\input{macros}

\usepackage{url}
\usepackage{graphicx}
\usepackage{clrscode3e}


\newcommand{\answer}{
 \par\medskip
 \textbf{Answer:}
}

\setlength{\oddsidemargin}{0pt}
\setlength{\evensidemargin}{0pt}
\setlength{\textwidth}{6.5in}
\setlength{\topmargin}{0in}
\setlength{\textheight}{8.5in}

\newcommand{\theproblemsetnum}{3}
\newcommand{\releasedate}{September 29, 2011}
\newcommand{\partaduedate}{Tuesday, October 5}
\newcommand{\tabUnit}{3ex}
\newcommand{\tabT}{\hspace*{\tabUnit}}
\end_preamble
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package none
\inputencoding auto
\fontencoding default
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 12
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 2
\use_package amssymb 0
\use_package cancel 0
\use_package esint 1
\use_package mathdots 0
\use_package mathtools 0
\use_package mhchem 0
\use_package stackrel 0
\use_package stmaryrd 0
\use_package undertilde 0
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 2
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
handout
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset

Problem Set 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
theproblemsetnum
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
releasedate
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard

\series bold
Problem 3-1
\end_layout

\begin_layout Standard

\series bold
(a) Answer: 
\series default
Min- and max-heaps enable constant-time retrieval of their min and max elements,
 respectively, but finding the maximum element in a min-heap or the minimum
 element in a max heap is 
\begin_inset Formula $O(n)$
\end_inset

.
 BSTs allow for 
\begin_inset Formula $O(log_{2}n)$
\end_inset

 retrieval of both the minimum and maximum element, but only if they are
 balanced.
 In the case of extremely unbalanced trees, these operations are 
\begin_inset Formula $O(n)$
\end_inset

.
 AVL trees are balanced BSTs that enable retrieval of both minimum and maximum
 elements in 
\begin_inset Formula $O(log_{2}n)$
\end_inset

 time, so the answer is AVL.
\end_layout

\begin_layout Standard

\series bold
(b) Answer: 
\series default
Insertion into an AVL tree takes 
\begin_inset Formula $O(log_{2}n)$
\end_inset

 time.
\end_layout

\begin_layout Standard

\series bold
(c) Answer: 
\series default
Retrieving the minimum key an AVL tree takes 
\begin_inset Formula $O(log_{2}n)$
\end_inset

 time.
\end_layout

\begin_layout Standard

\series bold
(d) Answer: 
\series default
Retrieving the maximum key an AVL tree takes 
\begin_inset Formula $O(log_{2}n)$
\end_inset

 time.
\end_layout

\begin_layout Standard

\series bold
(e) Answer: 
\begin_inset Formula $Rank(h)-Rank(l)+1$
\end_inset


\series default
.
 Just imagine an array 
\begin_inset Formula $1,2,3,4,5$
\end_inset

.
 Then 
\begin_inset Formula $Count(3,5)=3$
\end_inset

, 
\begin_inset Formula $Rank(5)=5$
\end_inset

 and 
\begin_inset Formula $Rank(3)=3$
\end_inset

, so 
\begin_inset Formula $Count(3,5)=Rank(5)-Rank(3)+1$
\end_inset

.
\end_layout

\begin_layout Standard

\series bold
(f) Answer: 
\begin_inset Formula $Rank(h)-Rank(l)$
\end_inset


\series default
.
 If we remove 
\begin_inset Formula $3$
\end_inset

 from the previous array, we have 
\begin_inset Formula $1,2,4,5$
\end_inset

.
 Now 
\begin_inset Formula $Count(3,5)=2$
\end_inset

, 
\begin_inset Formula $Rank(5)=4$
\end_inset

 and 
\begin_inset Formula $Rank(3)=2$
\end_inset

, so 
\begin_inset Formula $Count(3,5)=Rank(5)-Rank(3)$
\end_inset

.
\end_layout

\begin_layout Standard

\series bold
(g) Answer: 
\begin_inset Formula $Rank(h)-Rank(l)$
\end_inset


\series default
.
 If we remove 
\begin_inset Formula $5$
\end_inset

 from the original array, we have 
\begin_inset Formula $1,2,3,4$
\end_inset

.
 Now 
\begin_inset Formula $Count(3,5)=2$
\end_inset

, 
\begin_inset Formula $Rank(5)=4$
\end_inset

 and 
\begin_inset Formula $Rank(3)=3$
\end_inset

, so 
\begin_inset Formula $Count(3,5)=Rank(5)-Rank(3)+1$
\end_inset

.
\end_layout

\begin_layout Standard

\series bold
(h) Answer.
 
\begin_inset Formula $Rank(h)-Rank(l)$
\end_inset

.
 
\series default
If we remove both 3 and 5 from the original array, we end up with 
\begin_inset Formula $1,2,4$
\end_inset

.
 Now 
\begin_inset Formula $Count(3,5)=1$
\end_inset

, 
\begin_inset Formula $Rank(5)=3$
\end_inset

 and 2, so 
\begin_inset Formula $Count(3,5)=Rank(5)-Rank(3)$
\end_inset

.
\end_layout

\begin_layout Standard

\series bold
(i) Answer.
 
\series default
Choice 4, the number of nodes in the subtree rooted at 
\begin_inset Formula $node$
\end_inset

.
 This information can be updated in constant time as 
\begin_inset Formula $node.left.\gamma+node.right.\gamma+1$
\end_inset

.
 In addition, this information can be used to calculate rank of 
\begin_inset Formula $node$
\end_inset

.
 To do so, initialize 
\begin_inset Formula $rank=node.left.\gamma$
\end_inset

 if 
\begin_inset Formula $node.left$
\end_inset

 exists, otherwise initialize 
\begin_inset Formula $rank=1$
\end_inset

.
 Then travel up the three from 
\begin_inset Formula $node$
\end_inset

.
 Anytime you go left up the tree to a parent node 
\begin_inset Formula $parent_{L}$
\end_inset

, increment 
\begin_inset Formula $rank$
\end_inset

 by 
\begin_inset Formula $parent.left.\gamma+1$
\end_inset

.
 Stop when you reach the root.
 This take time 
\begin_inset Formula $O(log_{2}n)$
\end_inset

.
 
\end_layout

\begin_layout Standard

\series bold
(j) Answer: 
\series default
You need 
\begin_inset Formula $O(log_{2}n)$
\end_inset

 bits to store a number between 0 and 
\begin_inset Formula $n$
\end_inset

.
\end_layout

\begin_layout Standard

\series bold
(k) Answer: 
\series default
A leaf node as 
\begin_inset Formula $\gamma=1$
\end_inset

.
\end_layout

\begin_layout Standard

\series bold
(l) Answer: 
\series default

\begin_inset Formula $N_{3}.\gamma=3$
\end_inset

.
\end_layout

\begin_layout Standard

\series bold
(m) Answer: 
\begin_inset Formula $N_{2}.\gamma=6$
\end_inset


\series default
.
\end_layout

\begin_layout Standard

\series bold
(n) Answer: 
\series default

\begin_inset Formula $N_{1}.\gamma=10$
\end_inset

.
\end_layout

\begin_layout Standard

\series bold
(o) Answer: 
\series default

\begin_inset Formula $Insert$
\end_inset

 and 
\begin_inset Formula $Delete$
\end_inset

 only needs to satisfy the 
\begin_inset Formula $BST$
\end_inset

 property, so they do not need to be modified.
 But once a node is inserted or deleted, separate procedures, namely 
\begin_inset Formula $Rebalance$
\end_inset

, 
\begin_inset Formula $Left-Rotate$
\end_inset

, and 
\begin_inset Formula $Right-Rotate$
\end_inset

, are called to maintain the 
\begin_inset Formula $AVL$
\end_inset

 property.
 These procedures can modify the tree in ways that change the value of 
\begin_inset Formula $\gamma$
\end_inset

, and so must be modified to maintain both the 
\begin_inset Formula $AVL$
\end_inset

 property and the 
\begin_inset Formula $\gamma$
\end_inset

 rep invariant.
 
\end_layout

\begin_layout Standard

\series bold
(p) Answer: 
\begin_inset Formula $Rank$
\end_inset

 
\series default
is similar to 
\begin_inset Formula $Insert$
\end_inset

 or 
\begin_inset Formula $Delete$
\end_inset

 .
 It travels down the 
\begin_inset Formula $AVL$
\end_inset

 tree until if finds the location in the tree that corresponds to a given
 value.
 Like those procedures, its running time is bounded by the height of the
 tree, which is 
\series bold

\begin_inset Formula $O(log_{2}N)$
\end_inset

.
\end_layout

\begin_layout Standard

\series bold
(q) Answer: 
\series default
The procedure 
\begin_inset Formula $LCA$
\end_inset

 takes in a tree, a lower value 
\begin_inset Formula $l$
\end_inset

, and a higher value 
\begin_inset Formula $h$
\end_inset

.
 It travels down the tree until it reaches a node whose key is between 
\begin_inset Formula $l$
\end_inset

 and 
\begin_inset Formula $h$
\end_inset

 .
 It then returns this node.
 If no such node exists, it returns null.
 If you visualize this process, you'll see that this finds the lowest common
 ancestor in the tree.
\end_layout

\begin_layout Standard

\series bold
(r) Answer: 
\series default
At most, 
\begin_inset Formula $LCA$
\end_inset

 has to traverse down the entire tree.
 This takes 
\begin_inset Formula $O(log_{2}n)$
\end_inset

 in a balanced 
\begin_inset Formula $AVL$
\end_inset

 tree.
 
\end_layout

\begin_layout Standard

\series bold
(s) Anwer: 
\begin_inset Formula $Node-List$
\end_inset

 
\series default
is called for each of the 
\begin_inset Formula $L$
\end_inset

 nodes added.
 Running time is 
\begin_inset Formula $O(1)+O(L)$
\end_inset

.
\end_layout

\begin_layout Standard

\series bold
(t) Answer: 
\begin_inset Formula $List$
\end_inset

 
\series default
makes one call to 
\begin_inset Formula $LCA$
\end_inset

 and one call to 
\begin_inset Formula $Node-List$
\end_inset

.
 As show in parts (r) and (s), these take 
\begin_inset Formula $O(log_{2}N)+O(L)$
\end_inset

 in total.
\end_layout

\begin_layout Standard

\series bold
(u) Answer: 
\series default
First observe that 
\begin_inset Formula $LCA$
\end_inset

 is guaranteed to terminate in 
\begin_inset Formula $O(log_{2}N)$
\end_inset

 steps, because it descends one level in the 
\begin_inset Formula $AVL$
\end_inset

 tree at every step.
 Now assume that a non-empty set of nodes exist whose key values are between
 
\begin_inset Formula $l$
\end_inset

 and 
\begin_inset Formula $h$
\end_inset

.
 The loop condition guarantees that the node returned is the highest node
 in this set.
 Call this node 
\begin_inset Formula $n_{R}$
\end_inset

.
 This implies that nodes with values 
\begin_inset Formula $l$
\end_inset

 and 
\begin_inset Formula $h$
\end_inset

 are located in left and right subtrees of the subtree rooted at 
\begin_inset Formula $n_{R}$
\end_inset

.
 Thefefore, any lower node in the tree cannot be a common ancestor of nodes
 with values 
\begin_inset Formula $l$
\end_inset

 and 
\begin_inset Formula $h$
\end_inset

.
 So, 
\begin_inset Formula $n_{R}$
\end_inset

 is in fact the 
\begin_inset Formula $lowest$
\end_inset

 common ancestor of nodes with values 
\begin_inset Formula $l$
\end_inset

 and 
\begin_inset Formula $h$
\end_inset

.
 
\end_layout

\begin_layout Standard
Now assume there are no nodes with key values between 
\begin_inset Formula $l$
\end_inset

 and 
\begin_inset Formula $h$
\end_inset

.
 If no node in the tree satistfies the condition in the until block, 
\begin_inset Formula $LCA$
\end_inset

 will traverse left down the tree until it reaches a leaf, at which point
 it returns 
\begin_inset Formula $null$
\end_inset

.
 
\end_layout

\begin_layout Standard

\series bold
Problem 3-2
\end_layout

\begin_layout Standard

\series bold
(a) Answer: 
\series default
intersects has the highest CPU usage.
 
\end_layout

\begin_layout Standard

\series bold
(b) Answer: 
\series default
intersects is called 187590314 times.
\end_layout

\begin_layout Standard

\series bold
(c) Answer: 
\series default
1 and 2.
 Left and right endpoints of horizontal wires are points of interest.
 
\end_layout

\begin_layout Standard

\series bold
(d) Answer: 
\series default
1.
 Wires are added to the range index when the sweep line intersects their
 left endpoint.
\end_layout

\begin_layout Standard

\series bold
(e) Answer: 
\series default
2.
 Wires are removed from the range index when the sweep line reaches their
 right endpoint.
 
\end_layout

\begin_layout Standard

\series bold
(f) Answer: 
\series default
4.
 Nothing happens.
 
\end_layout

\begin_layout Standard

\series bold
(g) Answer: 
\series default
3.
 A range index query is performed.
 
\end_layout

\begin_layout Standard

\series bold
(h) Answer: 
\series default
2.
 Horizontal wires are added to the range index when the sweep line hits
 their left endpoing, and removed when the sweep line hits their right endpoint.
 Given that the sweep line moves from left to right, a horizontal line is
 in the range index for if and only if the sweep line is currently intersecting
 the horizontal line.
 
\end_layout

\begin_layout Standard

\series bold
(i) Answer: 
\series default
The y coordinate 
\begin_inset Formula $y_{1}$
\end_inset

 is added as the key in the KeyWirePairs.
\end_layout

\end_body
\end_document
